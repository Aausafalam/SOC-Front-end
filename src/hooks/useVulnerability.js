import { useState, useCallback } from "react";
import { useLoader } from "../context/LoaderContext";
import { getVulnerabilityDashboardData, getVulnerabilityList } from "../api/vulnerability";

export const useVulnerabilityList = () => {
    const [vulnerabilityList, setVulnerabilityList] = useState([]);
    const {showLoader, hideLoader} = useLoader();

    const fetchVulnerabilityList = useCallback(async () => {
        const controller = new AbortController();
        showLoader();
        try {
            const list = await getVulnerabilityList(controller.signal);
            setVulnerabilityList(list);
        } catch (error) {
            setVulnerabilityList([]);
            console.error("Error fetching Vulnerability list:", error);
        } finally {
            hideLoader();
        }
        return () => controller.abort();
    }, [showLoader, hideLoader]);

    return { vulnerabilityList, fetchVulnerabilityList };
};

export const useVulnerabilityDashboardData = () => {
    const [vulnerabilityDashboardData, setVulnerabilityDashboardData] = useState([]);
    const {showLoader, hideLoader} = useLoader();

    const fetchVulnerabilityDashboardData = useCallback(async () => {
        const controller = new AbortController();
        showLoader();
        try {
            const list = await getVulnerabilityDashboardData(controller.signal);
            setVulnerabilityDashboardData(list);
        } catch (error) {
            setVulnerabilityDashboardData([]);
            console.error("Error fetching Vulnerability Dashboard data:", error);
        } finally {
            hideLoader();
        }
        return () => controller.abort();
    }, [showLoader, hideLoader]);

    return { vulnerabilityDashboardData, fetchVulnerabilityDashboardData };
}