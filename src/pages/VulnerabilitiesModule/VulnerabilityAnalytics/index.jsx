import React, { useEffect, useState } from 'react';
import axios from 'axios';
import EChartsComponent from "../../../components/Echarts/index.jsx";
import styles from "./index.module.css"
const VulnerabilityAnalyticsPage = () => {
  const [radialPolarData, setRadialPolarData] = useState([]);
  const [horizontalBarData, setHorizontalBarData] = useState([]);
  const [verticalStackedBarData, setVerticalStackedBarData] = useState([]); // State for vertical stacked bar chart
  const [radialPolarDataAssignedTo, setRadialPolarDataAssignedTo] = useState([]);
  const [pieDataStatus, setPieDataStatus] = useState([]);
  const [verticalStackedBarDataTickets, setVerticalStackedBarDataTickets] = useState([]);

  useEffect(() => {
    // Fetch data from server
    const fetchData = () => {
      // Fetch data for the radial polar chart
      axios.get('http://192.168.40.52:5000/api/get_vuln_os_count')
        .then(radialResponse => {
          // Set the radial polar data from the response
          setRadialPolarData(radialResponse.data);

          // Fetch data for the horizontal bar chart after radial data is successfully fetched
          return axios.get('http://192.168.40.52:5000/api/get_baseScore_count');
        })
        .then(horizontalResponse => {
          // Set the horizontal bar data from the response
          setHorizontalBarData(horizontalResponse.data);

          // Fetch data for the vertical stacked bar chart
          return axios.get('http://192.168.40.52:5000/api/get_reportedDate_count');
        })
        .then(verticalResponse => {
          // Set the vertical stacked bar data from the response
          setVerticalStackedBarData(verticalResponse.data);
        })
        .catch(error => {
          // Handle errors for both requests
          console.error('Error fetching data:', error.message);
        });
    };

    fetchData();
  }, []);

  useEffect(() => {
    // Fetch data from server
    const fetchData = () => {
      // Fetch data for the radial polar chart
      axios.get('http://192.168.40.52:5000/api/get_assignedTo_count')
        .then(radialResponse => {
          // Set the radial polar data from the response
          setRadialPolarDataAssignedTo(radialResponse.data);

          // Fetch data for the horizontal bar chart after radial data is successfully fetched
          return axios.get('http://192.168.40.52:5000/api/get_status_count');
        })
        .then(pieResponse => {
          // Set the horizontal bar data from the response
          setPieDataStatus(pieResponse.data);

          // Fetch data for the vertical stacked bar chart
          return axios.get('http://192.168.40.52:5000/api/get_ticketByDate_count');
        })
        .then(verticalResponse => {
          // Set the vertical stacked bar data from the response
          setVerticalStackedBarDataTickets(verticalResponse.data);
        })
        .catch(error => {
          // Handle errors for both requests
          console.error('Error fetching data:', error.message);
        });
    };

    fetchData();
  }, []);


  const radialPolarOptions = {
    title: {
      text: 'Vulnerabilities per Operating System',
      left: 'center',
    },
    tooltip: {},
    polar: {
      radius: '70%',
    },
    angleAxis: {
      type: 'category',
      data: radialPolarData.map(item => item.category),
      axisLine: { lineStyle: { color: '#999' } },
    },
    radiusAxis: {
      type: 'value',
      min: 0,
      max: Math.max(...radialPolarData.map(item => item.value)), // Adjust max value
      axisLine: { lineStyle: { color: '#999' } },
    },
    series: [
      {
        type: 'bar',
        data: radialPolarData.map(item => item.value),
        coordinateSystem: 'polar',
        stack: 'a',
        emphasis: {
          focus: 'series',
        },
        label: {
          show: true,
          position: 'middle',
          formatter: '{c}'
        },
        itemStyle: {
          color: (params) => {
            const colors = ['#FF5733', '#33FF57', '#3357FF', '#F4C542', '#42F4C5'];
            return colors[params.dataIndex];
          }
        }
      },
    ],
  };

  const horizontalBarOptions = {
    title: {
      text: 'Vulnerability Count by Base Score',
      left: 'center',
    },
    tooltip: {},
    xAxis: {
      type: 'value',
      axisLabel: { formatter: '{value}' },
    },
    yAxis: {
      type: 'category',
      data: horizontalBarData.map(item => item.category),
      axisLine: { lineStyle: { color: '#999' } },
    },
    series: [
      {
        name: 'Values',
        type: 'bar',
        data: horizontalBarData.map(item => item.value),
        emphasis: {
          focus: 'series',
        },
      },
    ],
  };

  const verticalStackedBarOptions = {
    title: {
      text: 'Vulnerabiities Detected by Day',
      subtext: 'Daily Data for July',
      left: 'center',
    },
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow',
      },
    },
    legend: {
      data: ['Critical', 'High', 'Medium', 'Low'],
      bottom: 0,
      // color: '#ee6666'
    },
    xAxis: {
      type: 'category',
      data: Array.from({ length: 31 }, (_, i) => i + 1), // Days of July (1 to 31)
      axisLine: { lineStyle: { color: '#999' } },
    },
    yAxis: {
      type: 'value',
      axisLabel: { formatter: '{value}' },
      axisLine: { lineStyle: { color: '#999' } },
    },
    series: [
      {
        name: 'Critical',
        type: 'bar',
        stack: 'total',
        data: verticalStackedBarData.map(item => item.critical),
        itemStyle: { color: '#FF0000' },
      },
      {
        name: 'High',
        type: 'bar',
        stack: 'total',
        data: verticalStackedBarData.map(item => item.high),
        itemStyle: { color: '#FF8C00' },
      },
      {
        name: 'Medium',
        type: 'bar',
        stack: 'total',
        data: verticalStackedBarData.map(item => item.medium),
        itemStyle: { color: '#FFD700' },
      },
      {
        name: 'Low',
        type: 'bar',
        stack: 'total',
        data: verticalStackedBarData.map(item => item.low),
        itemStyle: { color: '#32CD32' },
      },
    ],
  };

  const radialPolarOptionsAssignedTo = {
    title: {
      text: 'Tickets assigned',
      left: 'center',
    },
    tooltip: {},
    polar: {
      radius: '70%',
    },
    angleAxis: {
      type: 'category',
      data: radialPolarDataAssignedTo.map(item => item.category),
      axisLine: { lineStyle: { color: '#999' } },
    },
    radiusAxis: {
      type: 'value',
      min: 0,
      max: Math.max(...radialPolarDataAssignedTo.map(item => item.value)), // Adjust max value
      axisLine: { lineStyle: { color: '#999' } },
    },
    series: [
      {
        type: 'bar',
        data: radialPolarDataAssignedTo.map(item => item.value),
        coordinateSystem: 'polar',
        stack: 'a',
        emphasis: {
          focus: 'series',
        },
        label: {
          show: true,
          position: 'middle',
          formatter: '{c}'
        },
        itemStyle: {
          color: (params) => {
            const colors = ['#FF5733', '#33FF57', '#3357FF', '#F4C542', '#42F4C5'];
            return colors[params.dataIndex];
          }
        }
      },
    ],
  };

  // const pieOptionsStatus = {
  //   title: {
  //     text: 'Vulnerability Count by Base Score',
  //     left: 'center',
  //   },
  //   tooltip: {},
  //   xAxis: {
  //     type: 'value',
  //     axisLabel: { formatter: '{value}' },
  //   },
  //   yAxis: {
  //     type: 'category',
  //     data: pieDataStatus.map(item => item.category),
  //     axisLine: { lineStyle: { color: '#999' } },
  //   },
  //   series: [
  //     {
  //       name: 'Values',
  //       type: 'bar',
  //       data: pieDataStatus.map(item => item.value),
  //       emphasis: {
  //         focus: 'series',
  //       },
  //     },
  //   ],
  // };
  const pieOptionsStatus = {
    title: {
      text: 'Current Status of Tickets',
      // subtext: 'Fake Data',
      left: 'center'
    },
    tooltip: {
      trigger: 'item'
    },
    legend: {
      orient: 'vertical',
      left: 'left'
    },
    series: [
      {
        name: 'Status',
        type: 'pie',
        radius: '50%',
        data: pieDataStatus.map(item => ({ value: item.value, name: item.category }))
      }
    ]
  };

  const verticalStackedBarOptionsTickets = {
    title: {
      text: 'Tickets opened by day',
      subtext: 'Daily Data for July',
      left: 'center',
    },
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow',
      },
    },
    legend: {
      data: ['To-Do', 'In-Progress', 'In-Review', 'Completed'],
      bottom: 0,
      // color: '#ee6666'
    },
    xAxis: {
      type: 'category',
      data: Array.from({ length: 31 }, (_, i) => i + 1), // Days of July (1 to 31)
      axisLine: { lineStyle: { color: '#999' } },
    },
    yAxis: {
      type: 'value',
      axisLabel: { formatter: '{value}' },
      axisLine: { lineStyle: { color: '#999' } },
    },
    series: [
      {
        name: 'To-Do',
        type: 'bar',
        stack: 'total',
        data: verticalStackedBarDataTickets.map(item => item.toDo),
        itemStyle: { color: '#FF0000' },
      },
      {
        name: 'In-Progress',
        type: 'bar',
        stack: 'total',
        data: verticalStackedBarDataTickets.map(item => item.inProgress),
        itemStyle: { color: '#FF8C00' },
      },
      {
        name: 'In-Review',
        type: 'bar',
        stack: 'total',
        data: verticalStackedBarDataTickets.map(item => item.inReview),
        itemStyle: { color: '#FFD700' },
      },
      {
        name: 'Completed',
        type: 'bar',
        stack: 'total',
        data: verticalStackedBarDataTickets.map(item => item.completed),
        itemStyle: { color: '#32CD32' },
      },
    ],
  };

  return (
    <div className={styles.container}>
      {/* <h1>Analytics Page</h1> */}
        <div className={styles.body}>
        <div className="chart radial-polar-chart">
          <EChartsComponent options={radialPolarOptions} />
        </div>
        <div className="chart horizontal-bar-chart">
          <EChartsComponent options={horizontalBarOptions} />
        </div>
        <div className="chart vertical-stacked-bar-chart">
          <EChartsComponent options={verticalStackedBarOptions} />
        </div>

     
        <div className="chart radial-polar-chart">
          <EChartsComponent options={radialPolarOptionsAssignedTo} />
        </div>
        <div className="chart horizontal-bar-chart">
          <EChartsComponent options={pieOptionsStatus} />
        </div>
        <div className="chart vertical-stacked-bar-chart">
          <EChartsComponent options={verticalStackedBarOptionsTickets} />
        </div>
        </div>
      </div>
  );
};

export default VulnerabilityAnalyticsPage;
